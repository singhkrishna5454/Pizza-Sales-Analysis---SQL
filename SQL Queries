--SQL Project 

## Create Database pizzahut

CREATE DATABASE pizzahut;

## Import the data by creating tables orders

CREATE TABLE orders (
    order_id INT NOT NULL,
    order_date DATE NOT NULL,
    order_time TIME NOT NULL,
    PRIMARY KEY (order_id)
);

## Import the data by creating tables order_details

CREATE TABLE order_details (
    order_details_id INT NOT NULL,
    order_id INT NOT NULL,
    pizza_id TEXT NOT NULL,
    quantity INT NOT NULL,
    PRIMARY KEY (order_details_id)
);

## Qes1:- Retrieve the total number of orders placed.

SELECT COUNT(order_id) AS total_order FROM orders;

-- Que2 :- Calculate the total revenue generated from pizza sales.

SELECT 
    ROUND(SUM(order_details.quantity * pizzas.price),2) AS total_sales
FROM
    order_details
        JOIN
    pizzas ON pizzas.pizza_id = order_details.pizza_id;

## Que3 :- Identify the highest-priced pizza.

SELECT 
    pizza_types.name, 
    pizzas.price
FROM 
    pizzas
JOIN 
    pizza_types ON pizzas.pizza_type_id = pizza_types.pizza_type_id
ORDER BY 
    pizzas.price DESC
LIMIT 1;

## Que4 :- Identify the most common pizza size ordered.

SELECT 
    pizzas.size, 
    COUNT(order_details.order_details_id) AS order_count
FROM 
    pizzas
JOIN 
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY 
    pizzas.size
ORDER BY
    order_count DESC
LIMIT 1;

## Que5 :- List the top 5 most ordered pizza types along with their quantities.

SELECT 
    pizza_types.name, 
    SUM(order_details.quantity) AS Quantity_count
FROM 
    pizza_types
JOIN 
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY 
    pizza_types.name
ORDER BY
    Quantity_count DESC
LIMIT 5;

## Que6 :- Join the necessary tables to find the total quantity of each pizza category ordered.

SELECT 
    pizza_types.category, 
    SUM(order_details.quantity) AS Quantity_count
FROM 
    pizza_types
JOIN 
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY 
    pizza_types.category;
    
## Que7 :- Determine the distribution of orders by hour of the day.

SELECT 
    HOUR(order_time), COUNT(order_id)
FROM
    orders
GROUP BY HOUR(order_time);

## Que8 :- Join relevant tables to find the category-wise distribution of pizzas.

SELECT category,COUNT(name) FROM pizza_types
GROUP BY category;

## Que9 :- Group the orders by date and calculate the average number of pizzas ordered per day.

SELECT 
    AVG(total_order_per_day)
FROM
    (SELECT 
        orders.order_date,
            SUM(order_details.quantity) AS total_order_per_day
    FROM
        orders
    JOIN order_details ON orders.order_id = order_details.order_id
    GROUP BY orders.order_date) AS order_quantity;
    
## Que10 :- Determine the top 3 most ordered pizza types based on revenue.

SELECT 
    pizza_types.name, 
    SUM(order_details.quantity * pizzas.price) AS total_rev 
FROM 
    pizza_types
JOIN 
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN 
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY 
    pizza_types.name
ORDER BY 
    total_rev DESC
LIMIT 3;
    
## Que11 :- Calculate the percentage contribution of each pizza Category to total revenue.

SELECT 
    total_amt.category,
    ROUND((total_amt.total_rev / SUM(total_amt.total_rev) OVER ()),2) * 100 AS total_per
FROM 
    (SELECT 
        pizza_types.category, 
        SUM(order_details.quantity * pizzas.price) AS total_rev
    FROM 
        pizza_types
    JOIN 
        pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
    JOIN 
        order_details ON order_details.pizza_id = pizzas.pizza_id
    GROUP BY 
        pizza_types.category) AS total_amt;

## Que :- Analyze the cumulative revenue generated over time.

SELECT 
    order_date,
    ROUND(SUM(total_rev) OVER (ORDER BY order_date),2) AS cumulative_rev
FROM
    (SELECT 
        orders.order_date, 
        ROUND(SUM(order_details.quantity * pizzas.price), 1) AS total_rev
    FROM 
        order_details
    JOIN 
        pizzas ON order_details.pizza_id = pizzas.pizza_id
    JOIN 
        orders ON orders.order_id = order_details.order_id
    GROUP BY 
        orders.order_date) AS total_amt;

## Que :- Determine the top 3 most ordered pizza types based on revenue for each pizza category.

SELECT 
    category,
    name,
    total_rev
FROM (
    SELECT 
        category,
        name,
        total_rev,
        RANK() OVER (PARTITION BY category ORDER BY total_rev DESC) AS rn
    FROM (
        SELECT 
            pizza_types.category, 
            pizza_types.name, 
            SUM(order_details.quantity * pizzas.price) AS total_rev
        FROM 
            pizza_types
        JOIN 
            pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN 
            order_details ON order_details.pizza_id = pizzas.pizza_id
        GROUP BY 
            pizza_types.category, 
            pizza_types.name
    ) AS a
) AS b
WHERE rn <= 3;
